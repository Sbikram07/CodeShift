[
  {
    "original": "def fibonacci(n):\n    a, b = 0, 1\n    result = []\n    while len(result) < n:\n        result.append(a)\n        a, b = b, a + b\n    return result\n\nprint(fibonacci(10))",
    "converted": "function fibonacci(n) {\n  let a = 0, b = 1;\n  const result = [];\n  while (result.length < n) {\n    result.push(a);\n    [a, b] = [b, a + b];\n  }\n  return result;\n}\n\nconsole.log(fibonacci(10));",
    "originalLang": "python",
    "convertedLang": "javascript"
  },
  {
    "original": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1)\n return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    cout << factorial(5);\n    return 0;\n}",
    "converted": "public class Factorial {\n    static int factorial(int n) {\n        if (n <= 1)\n return 1;\n        return n * factorial(n - 1);\n    }\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}",
    "originalLang": "cpp",
    "convertedLang": "java"
  },
  {
    "original": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
    "converted": "import FastAPI\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, World!\"}\n\n# Run with: uvicorn main:app --reload",
    "originalLang": "javascript",
    "convertedLang": "python"
  },
  {
    "original": "public class Palindrome {\n    public static boolean isPalindrome(String str) {\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right))\n return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"level\"));\n    }\n}",
    "converted": "function isPalindrome(str: string): boolean\n {\n  let left = 0, right = str.length - 1;\n  while (left < right) {\n    if (str[left] !== str[right])\n return false;\n    left++;\n    right--;\n  }\n  return true;\n}\n\nconsole.log(isPalindrome(\"level\"));",
    "originalLang": "java",
    "convertedLang": "typescript"
  },
  {
    "original": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))",
    "converted": "const bubbleSort = (arr) => {\n  const n = arr.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n  return arr;\n};\n\nconsole.log(bubbleSort([64, 34, 25, 12, 22, 11, 90]));",
    "originalLang": "python",
    "convertedLang": "javascript"
  },
  {
    "original": "fn main() {\n    let mut count = 0;\n    while count < 5 {\n        println!(\"Count is {}\", count);\n        count += 1;\n    }\n    println!(\"Done\");\n}",
    "converted": "int main() {\n    int count = 0;\n    while (count < 5) {\n        printf(\"Count is %d\\n\", count);\n        count++;\n    }\n    printf(\"Done\\n\");\n    return 0;\n}",
    "originalLang": "rust",
    "convertedLang": "c"
  },
  {
    "original": "# filter even numbers using list comprehension\neven_nums = [x for x in range(20) if x % 2 == 0]\nprint(even_nums)\n\n# square numbers\ndef squares(nums):\n    return [n * n for n in nums]\n\nprint(squares([1, 2, 3, 4]))",
    "converted": "const evenNums = Array.from(\n{ length: 20 }, (_, i) => i).filter(x => x % 2 === 0);\nconsole.log(evenNums);\n\nconst squares = nums => nums.map(n => n * n);\nconsole.log(squares([1, 2, 3, 4]));",
    "originalLang": "python",
    "convertedLang": "javascript"
  }
]
